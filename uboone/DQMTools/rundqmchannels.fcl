#include "services_microboone.fcl"
#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "cluster_microboone.fcl"
#include "mchitmodules.fcl"

#include "analysistreemodule_microboone.fcl"

process_name: DQMHits

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.

  # Load the service that manages root files for histograms.
  TFileService: { fileName: "DQMHitsOutput_hist.root" }
  #Timing:       {}

  #SimpleMemoryCheck:       { ignoreTotal: 1 } # default is one

  RandomNumberGenerator: {} #ART native random number generator
                @table::microboone_full_services

  FileCatalogMetadata:     @local::art_file_catalog_mc

}

services.DetectorClocksService.InheritClockConfig: false


#Start each new event with an empty event.
source:
{
  module_type: RootInput
  #fileNames: ["myInputFile.root"]
  #maxEvents:  -1        # Number of events to create
  #firstRun:    1           # Run number to use for this file
  #firstEvent:  1           # number of first event in the file

}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
  caldata:             @local::microboone_calroi
  gaushit:             @local::microboone_gaushitfinder
  rffhit:              @local::microboone_rffhitfinder
  ccluster:	       @local::microboone_clustercrawler
  mchit:               @local::standard_mchitfinder

 }

 analyzers:
 {
   dqmChannelNoise:
   {
         module_type: DQMChannelNoiseModule
         DigitModuleLabel: "daq"
         ChannelsToHistogram: []
   }
 }

 #reco:     [rffhit, ccluster]
 #reco:     [caldata, gaushit, rffhit, ccluster, mchit]
 stream1:  [ out1 ]
 analyze:  [ dqmChannelNoise ]

 #trigger_paths: [ reco ]
 end_paths:     [ analyze, stream1 ]   
 #end_paths: [stream1,analyze]
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   dataTier: "reconstructed-flashmatch"
   fileName: "DQMChannelsOutput.root"
   compressionLevel: 1
   outputCommands: ["keep *_*_*_*",
                    "drop raw::RawDigits_*_*_*",
                    "drop recob::Cluster_*_*_*",
                    "drop recob::EndPoint2D_*_*_*",
                    "drop recob::Hit_*_*_*",
                    "drop recob::Vertex_*_*_*",
                    "drop recob::Wires_*_*_*"]
 
 }
}

#physics.producers.caldata.uPlaneROIPad: [10,10]
#physics.producers.caldata.uPlaneRamp: false
physics.producers.ccluster.CalDataModuleLabel: "caldata"
