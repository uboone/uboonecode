////////////////////////////////////////////////////////////////////////
// Class:       FakeBNBGate
// Module Type: FakeBNBGate
// File:        FakeBNBGate_module.cc
//
// Generated at Thu Oct 22 08:05:23 2015 by Taritree Wongjirad using artmod
// from cetpkgsupport v1_08_07.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>

#include "Simulation/BeamGateInfo.h" // larsim

class FakeBNBGate;

class FakeBNBGate : public art::EDProducer {
public:
  explicit FakeBNBGate(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  FakeBNBGate(FakeBNBGate const &) = delete;
  FakeBNBGate(FakeBNBGate &&) = delete;
  FakeBNBGate & operator = (FakeBNBGate const &) = delete;
  FakeBNBGate & operator = (FakeBNBGate &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  double fGateWidth;
  double fGateG4time_ns;

private:

  // Declare member data here.

};


FakeBNBGate::FakeBNBGate(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.

  fGateWidth = p.get<double>("GateWidth",1600.0);
  fGateG4time_ns = p.get<double>("GateG4time_ns",0.0);
  
  produces< std::vector<sim::BeamGateInfo> >();
}

void FakeBNBGate::produce(art::Event & e)
{
  // Implementation of required member function here.
  std::unique_ptr< std::vector<sim::BeamGateInfo> > gateCollection(new std::vector<sim::BeamGateInfo>);
  gateCollection->push_back(sim::BeamGateInfo( fGateWidth, fGateG4time_ns, sim::kBNB ) );
  e.put( std::move( gateCollection ) );
}

DEFINE_ART_MODULE(FakeBNBGate)
