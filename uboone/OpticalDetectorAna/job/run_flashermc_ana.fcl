#include "geometry_microboone.fcl"
#include "timeservice_microboone.fcl"
#include "pmtconfig_microboone.fcl"
#include "databaseutil_microboone.fcl"
#include "microboone_flashermcana.fcl"

process_name: FlasherMCAnalysis
services:
{
  TFileService: { fileName: "output_flasher_analysis.root" }
  user: {
          ExptGeoHelperInterface: @local::microboone_geometry_helper
          Geometry:               @local::microboone_geo
          TimeService:            @local::microboone_timeservice
          DatabaseUtil:           @local::microboone_database
          UBOpReadoutMap:         @local::microboone_opreadoutmap
          }
}

services.user.DatabaseUtil.DBHostName:    "fnalpgsdev.fnal.gov"
services.user.DatabaseUtil.DBName:        "uboonedaq_dev"
services.user.DatabaseUtil.DBUser:        "uboonedaq_web"
services.user.DatabaseUtil.Port:          5436
services.user.DatabaseUtil.PassFileName:  "uboonedb_passwd"
services.user.DatabaseUtil.ToughErrorTreatment: true
services.user.DatabaseUtil.ShouldConnect: true
services.user.DatabaseUtil.TableName: "main_run"

# Define and configure some modules to do work on` each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
 {
 }

 analyzers:
 {
   flashermcana: @local::microboone_flashermcana
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: []
 analyzeIt:  [ flashermcana ]
 #define the output stream, there could be more than one if using filters 
 stream1:  []

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt]  
}

