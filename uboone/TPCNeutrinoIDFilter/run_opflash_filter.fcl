#include "services_microboone.fcl"

process_name: OpFlashFilter

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "filter_hist.root" }
  RandomNumberGenerator: {} #ART native random number generator
  @table::microboone_services_reco
}

services.DetectorClocksService.InheritClockConfig: false

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10
  saveMemoryObjectThreshold: 0
}

physics:
{

 producers:{}
 analyzers:{}
 filters:
 {
   flashfilter: { module_type: "OpFlashFilter"
   		  OpFlashTag: "opflashBeam"
		  #Verbose: true
		  FlashCuts: [
		  	       [ { MinPE:10 MinTime:2 MaxTime:15 Invert:true},
			       	 { MinPE:10 MinTime:15 MaxTime:20} ],
			       [ { MinPE:10 MinTime:0 MaxTime:2 } ]
		  	     ]
   		}
 }

 filter: [ flashfilter ]
 stream1:  [ out1 ]
 trigger_paths: [filter] 
 end_paths:     [stream1]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "filtered_reco.root"
   dataTier:    "reconstructed"
   SelectEvents: [ filter ]
   saveMemoryObjectThreshold: 0
   compressionLevel: 1
   fastCloning: false
 }
}
