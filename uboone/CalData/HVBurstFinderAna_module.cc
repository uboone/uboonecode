////////////////////////////////////////////////////////////////////////
// Class:       HVBurstFinderAna
// Module Type: analyzer
// File:        HVBurstFinderAna_module.cc
// elenag@fnal.gov
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "lardata/RawData/DAQHeader.h"
#include "lardata/RawData/RawDigit.h"

#include "art/Framework/Services/Optional/TFileService.h"
#include <numeric>
#include <memory>
#include <iostream>
#include <fstream>
#include <string>

namespace caldata{
  class HVBurstFinderAna;
}

namespace caldata{
  
  class HVBurstFinderAna: public art::EDAnalyzer {
  public:
    explicit HVBurstFinderAna(fhicl::ParameterSet const & p);
    // The destructor generated by the compiler is fine for classes
    // without bare pointers or other resource use.
    
    // Plugins should not be copied or assigned.
    HVBurstFinderAna(HVBurstFinderAna const &) = delete;
    HVBurstFinderAna(HVBurstFinderAna &&) = delete;
    HVBurstFinderAna & operator = (HVBurstFinderAna const &) = delete;
    HVBurstFinderAna & operator = (HVBurstFinderAna &&) = delete;
    
    void analyze(art::Event const & e) override;
    void beginJob();
    
  private:
    std::string                   fRawDigitModuleLabel;


  };
  
  
  HVBurstFinderAna::HVBurstFinderAna(fhicl::ParameterSet const & p)
    : EDAnalyzer(p)  ,
      fRawDigitModuleLabel(p.get<std::string>("RawDigitModuleLabel"))
  {}
  
  void HVBurstFinderAna::beginJob()
  {
    //   art::ServiceHandle<art::TFileService> tfs;
  }

  void HVBurstFinderAna::analyze(art::Event const & e)
  {

    //get event and run numbers
    unsigned int eventNumber  = e.id().event();
    unsigned int runNumber    = e.run();    //get the raw digits
    unsigned int subrunNumber = e.subRun();    //get the raw digits

    //get timestamp
    /*****DAQ header*******/
    /*
    art::Handle< std::vector<raw::DAQHeader> > DAQHeader_handle;
    e.getByLabel(fRawDigitModuleLabel,DAQHeader_handle);
    std::vector<raw::DAQHeader> const& DAQHeaderobj(*DAQHeader_handle);
    time_t daq_timestamp = DAQHeaderobj.GetTimeStamp();
    double event_timestamp_sec = (double)(daq_timestamp>>32);
    double event_timestamp_usec = 0.001*(double)(daq_timestamp & 0xFFFFFFFF);
    std::cout<<"DAQ header time stamp in sec = "<<(event_timestamp_sec-1486080000)/3600<<" in us="<<event_timestamp_usec<<std::endl;
    */
    
    art::Handle< raw::DAQHeader > daqHeaderHandle;
    e.getByLabel("daq", daqHeaderHandle);
    time_t dettime64  = daqHeaderHandle->GetTimeStamp();
    uint32_t detsec = uint32_t(dettime64>>32);
    uint32_t detmsec =uint32_t((dettime64 & 0xFFFFFFFF)*0.001);



    //get the raw data
    art::Handle< std::vector<raw::RawDigit> > digitHandle;
    e.getByLabel(fRawDigitModuleLabel,digitHandle);
    std::vector<raw::RawDigit> const& rawtpc_vec(*digitHandle);

    long int  ADCInTime[9600] = {0};
    long int ADCInTime0[9600] = {0};
    long int ADCInTime1[9600] = {0};
    long int ADCInTime2[9600] = {0};


    std::vector<int> burstTicks ;
    long int ADCMax0 = 0;
    long int ADCMax1 = 0;
    long int ADCMax2 = 0;

    int TimeADCMax0 = 0;
    int TimeADCMax1 = 0;
    int TimeADCMax2 = 0;


    for (int iADC = 0; iADC < 9595; iADC++ ) 
      {
	for (auto const& rawdigit : rawtpc_vec)
	  {
	    long int thisADC = (rawdigit.ADC(iADC)-rawdigit.GetPedestal());	   
	    ADCInTime[iADC] += thisADC;
	    if (rawdigit.Channel() < 2400) 
	      {
		ADCInTime0[iADC] += thisADC;
	      }else if (rawdigit.Channel() > 4799)
	      {
		ADCInTime2[iADC] += thisADC;
	      }else
	      {
		ADCInTime1[iADC] += thisADC;
	      }
	  }

	if (ADCInTime[iADC]/8256. > 1500. ) burstTicks.push_back(iADC);

	if (ADCMax0 < ADCInTime0[iADC] ) {ADCMax0 = ADCInTime0[iADC]; TimeADCMax0 = iADC;}
	if (ADCMax1 < ADCInTime1[iADC] ) {ADCMax1 = ADCInTime1[iADC]; TimeADCMax1 = iADC;}
	if (ADCMax2 < ADCInTime2[iADC] ) {ADCMax2 = ADCInTime2[iADC]; TimeADCMax2 = iADC;}
      }

    if(burstTicks.size())
      {
	float avgMax0 = (float) (ADCMax0-4910000)/2400.;
	float avgMax1 = (float) (ADCMax1-4910000)/2400.;
	float avgMax2 = (float) (ADCMax2-1640000)/3456.;

	std::cout<<"BURST FOUND! Run: "<<runNumber<<" SubrunNumber: "<<subrunNumber<<" Event:  "<<eventNumber
		 <<" avgMax0: "<<avgMax0<<" avgMax1: "<<avgMax1	<<" avgMax2: "<<avgMax2<<" TimeADCMax0: "<<TimeADCMax0<<" TimeADCMax1 "<<TimeADCMax1<<" TimeADCMax2 "<<TimeADCMax2
		 <<" BurstSize: "<<burstTicks.size() << std::endl;    

	std::string r   = std::to_string(runNumber);
	std::string sr  = std::to_string(subrunNumber);
	std::string txt = ".txt";
	std::string underscore = "_";
	std::string outFileName = "Burst_";
	outFileName += r;
	outFileName += underscore;
	outFileName += sr;
	outFileName += txt;
	
	ofstream myfile;
	myfile.open (outFileName,std::ios::app);
	myfile <<runNumber<<" "<<subrunNumber<<" "<<eventNumber<<" "<<ADCMax0<<" "<<ADCMax1<<" "<<ADCMax2<<" "<<TimeADCMax0<<" "<<TimeADCMax1<<" "<<TimeADCMax2<<" "<< detsec<<" "<<detmsec<<" "<<burstTicks.size() << std::endl;    
	std::cout<<"DAQ header time stamp in sec = "<<detsec<<" in us="<<detmsec<<std::endl;
	myfile.close();
      }
  }
  
}

DEFINE_ART_MODULE(caldata::HVBurstFinderAna)
  





