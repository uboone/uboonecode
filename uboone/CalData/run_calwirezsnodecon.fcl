#include "services_microboone.fcl"
#include "caldata_microboone.fcl"

process_name: CalDataSNNoDeco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "SNNoDeco_hist.root" }
  TimeTracker:  {}
  RandomNumberGenerator: {} #ART native random number generator
  DetectorProperties:             @local::microboone_detproperties
  DetectorClocksService:          @local::microboone_detectorclocks
  @table::microboone_services_reco
}

services.DetectorProperties.NumberTimeSamples:                             6400
services.DetectorProperties.ReadOutWindowSize:                             6400
services.DetectorClocksService.InheritClockConfig:                         false
services.DetectorClocksService.TriggerOffsetTPC:                          -0.400e3


#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:   -1          # Number of events to create
  #inputCommands: ["keep *_*_*_*","drop *_*_*_DetSim", "drop *_*_*_G4"]
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   snnodeco: @local::microboone_calzsnodecon # defined in caldata_microboone.fcl
 }
 
 analyzers:
 {
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ snnodeco ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

physics.producers.snnodeco.SaveWireWF: 0 # save waveforms?

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "SNNoDeco.root" #default file name, can override from command line with -o or --output
 }
}

