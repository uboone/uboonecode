#include "services_microboone.fcl"

process_name: ChannelStatus

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "ChannelStatus.root" }
  Timing:       {}
  RandomNumberGenerator: {}                     #ART native random number generator
  user:         @local::microboone_services
  message:      @local::standard_error
}

#services.user.Geometry: @local::detector_geo
services.user.DetectorProperties: @local::microboone_detproperties

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1            # Number of events to create
}

outputs:
{}

physics:
{
 analyzers:{
    ChannelStatus:
    {
    module_type: "ChannelStatus"
    RawDigitModuleLabel: "daq"
    }
    }
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 ana:  [ ChannelStatus ]
 
 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana ] 
}

