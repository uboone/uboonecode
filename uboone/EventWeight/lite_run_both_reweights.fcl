#include "services_microboone.fcl"
#include "time_memory_tracker_microboone.fcl"
#include "seedservice_microboone.fcl"
#include "ahack_genie_eventweight_microboone.fcl" 
#include "eventweight_microboone_MCC8.fcl"

#include "litemc_mcinfo.fcl"
#include "litemc_eventweight.fcl"

process_name: GenieEventWeight

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "genie_reweight_hist.root" }
  RandomNumberGenerator:   {} #ART native random number generator                                                                                          
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
  LLMetaMaker: {Enable: true }
  @table::microboone_simulation_services

}

services.FileCatalogMetadata.applicationVersion: "develop"
services.FileCatalogMetadata.fileType: "mc"
services.FileCatalogMetadata.runType: "physics"
services.FileCatalogMetadataMicroBooNE: {
  FCLName: "run_larlite_maker_mc.fcl"
  FCLVersion: "develop"
  ProjectName: "LiteMC"
  ProjectStage: "LiteMaker"
  ProjectVersion: "develop"
}

services.DetectorPropertiesService.NumberTimeSamples:        6400
services.DetectorPropertiesService.ReadOutWindowSize:        6400
services.DetectorClocksService.InheritClockConfig:           false
services.DetectorClocksService.TriggerOffsetTPC:             -0.400e3

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:{
   genieeventweight:    @local::genie_microboone_eventweight
   fluxeventweight:     @local::microboone_eventweight
   rns:                 { module_type: "RandomNumberSaver" }
 }

 analyzers:
  {
   mcinfo:  @local::litemc_mcinfo
   eventweight:     @local::litemc_eventweight
  }

 simulate: [ rns, genieeventweight, fluxeventweight ]
 
 stream1:       [ out1 ]

 ana: [ mcinfo, eventweight ]

 trigger_paths: [simulate]

 #end_paths:     [stream1, ana]  
 end_paths:     [ ana]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
#outputs.out1.fileName: "%ifb_%tc_reco1.root"
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "artroot_rewgt.root"    #default file name, can override from command line with -o or --output
   dataTier:    "reconstructed"
   compressionLevel: 1
 }
}

services.Geometry.ForceUseFCLOnly: true

physics.analyzers.mcinfo.stream:      "mcinfo"
physics.analyzers.eventweight.stream:      "eventweight"

physics.analyzers.mcinfo.SelectEvents: [ simulate ]  
physics.analyzers.eventweight.SelectEvents: [ simulate ] 

physics.analyzers.mcinfo.out_filename:      "larlite_mcinfo.root"
physics.analyzers.eventweight.out_filename:      "larlite_eventweight.root"
