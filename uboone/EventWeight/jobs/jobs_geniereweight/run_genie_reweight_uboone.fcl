#include "services_microboone.fcl"
#include "time_memory_tracker_microboone.fcl"
#include "seedservice_microboone.fcl"
#include "genie_eventweight_microboone.fcl"

process_name: GenieEventWeight

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "genie_reweight_hist.root" }
  TimeTracker:             @local::microboone_time_tracker
  MemoryTracker:           @local::microboone_memory_tracker
  RandomNumberGenerator:   {} #ART native random number generator                                                                                          
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
  @table::microboone_simulation_services

}

services.DetectorPropertiesService.NumberTimeSamples:        6400
services.DetectorPropertiesService.ReadOutWindowSize:        6400
services.DetectorClocksService.InheritClockConfig:           false
services.DetectorClocksService.TriggerOffsetTPC:             -0.400e3

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:{
   genieeventweight:    @local::genie_microboone_eventweight
   rns:                 { module_type: "RandomNumberSaver" }
 }

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, genieeventweight ]
 ana:      [ ]

 trigger_paths: [simulate]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1,ana]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs.out1.fileName: "%ifb_%tc_reco1.root"
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_rewgt.root.root"    #default file name, can override from command line with -o or --output
   dataTier:    "reconstructed"
   compressionLevel: 1
 }
}
