#include "time_memory_tracker_microboone.fcl"
#include "services_microboone.fcl"
#include "genie_microboone_default+MEC.fcl"

#include "microboone_siminfomixer.fcl"
#include "local_gen_include.fcl"
//========================================

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "gen_hist.root" }
  TimeTracker:             @local::microboone_time_tracker
  MemoryTracker:           @local::microboone_memory_tracker
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_g4_services
}

process_name : SinglesGen      #The process name must NOT contain any underscores

source:
{
  module_type: RootInput
  saveMemoryObjectThreshold: 0
  maxEvents: -1
}

outputs: {
  out: { module_type: RootOutput
  	 fileName: "%ifb_%tc_simmxd.root"
	 compressionLevel: 1 
	 dataTier: "generated"
         SelectEvents: ["mixer_path"]
       }
}

physics: {

  producers : {
    generator: @local::microboone_singlep
    largeant: @local::microboone_largeant
    ionization: @local::microboone_siminfomixer
  }

  analyzers: {
  }

  filters : {

  }

  mixer_path : [ generator, largeant, ionization ]
  trigger_paths : [ mixer_path ]

  output : [ out ]
  end_paths: [ output ]

}

physics.producers.generator.PDG: [11, 1000020040]
#physics.producers.generator.PDG: [2212, 2212]
#physics.producers.generator.P0: [  0.310, 0.310 ]
physics.producers.generator.P0: [  0.003746, 0.2396 ]
physics.producers.generator.SigmaP: [ 0, 0 ]
physics.producers.generator.PDist: 0
physics.producers.generator.X0: [128.0, 128.0]
physics.producers.generator.Y0: [0, 0]
physics.producers.generator.Z0: [600, 600]
physics.producers.generator.T0: [3925, 168225]
#physics.producers.generator.T0: [0, 0]
physics.producers.generator.SigmaX: [0, 0]
physics.producers.generator.SigmaY: [0, 0]
physics.producers.generator.SigmaZ: [0, 0]
physics.producers.generator.SigmaT: [0, 0]
physics.producers.generator.PosDist: 0
physics.producers.generator.Theta0XZ: [0, 0]
physics.producers.generator.Theta0YZ: [0, 0]
physics.producers.generator.SigmaThetaXZ: [0, 0]
physics.producers.generator.SigmaThetaYZ: [0, 0]
physics.producers.generator.AngleDist: 0


