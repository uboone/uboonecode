#include "services_microboone.fcl"
#include "genie_microboone_default+MEC.fcl"
#include "largeantmodules_microboone.fcl"


process_name: DirtCorsikaStage1

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "genie_hist.root" }
  TimeTracker: {
    printSummary : true
    dbOutput     : {
      filename   :  "time.db"
      overwrite  :  true
    }
  }
  MemoryTracker: {
    #ignoreTotal       : 1 # no. of events to exclude - '1' by default
    #printSummaries    : ["*"] # or any combination of ["general","event","module"]
    includeMallocInfo : true
    dbOutput     : {
      filename   :  "mem.db"
      overwrite  :  true
    }
  }

  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_gen_services
  @table::microboone_g4_services
  IFDH: {}

}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   rns:       { module_type: "RandomNumberSaver" }

   generator: @local::microboone_genie_uniform_flux_cc
   largeant:   @local::microboone_largeant
 }

 filters:       {

   FilterNoMCParticles:{
           LArG4ModuleLabel: "largeant"
           module_type: "FilterNoMCParticles"
  }

  FilterCryostatNus:{
          KeepNusInCryostat: false
          module_type: "FilterCryostatNus"
 }
 
   TimeFilter: { module_type: "FilterSimPhotonTime"
                          SimPhotonsCollectionLabel: largeant
                          TimeWindows: [ [2900,4900] ]
                          MinPhotonEnergy: -1
                          MinTotalEnergy: 9.7e-5 #10 photons...
               }

}

 #define the producer and filter modules for this path, order matters,
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator, FilterCryostatNus, largeant, FilterNoMCParticles, TimeFilter  ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [simulate]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "genie_gen.root" #default file name, can override from command line with -o or --output
   dataTier:    "generated"
   compressionLevel: 1
   SelectEvents: [simulate]
 }
}


physics.producers.generator: @local::microboone_genie_simple_dirt
physics.producers.generator.GlobalTimeOffset: 3125.
physics.producers.generator.RandomTimeOffset: 1600.
physics.producers.generator.TopVolume: "volWorld"
physics.producers.generator.BeamName: "booster"

physics.producers.largeant.KeepParticlesInVolumes: ["volCryostat"]
