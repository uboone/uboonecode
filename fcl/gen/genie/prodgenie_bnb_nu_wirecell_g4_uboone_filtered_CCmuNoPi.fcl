#include "services_microboone.fcl"
#include "genie_microboone_default+MEC.fcl"
#include "largeantmodules_microboone.fcl"
#include "mcreco.fcl"
#include "filters.fcl"
#include "time_memory_tracker_microboone.fcl"

# This is adapted from prodgenie_bnb_dirt_nu_wirecell_g4_uboone.fcl

process_name: FilteredStage1

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "genie_hist.root" }
  TimeTracker: {
    printSummary : true
    dbOutput     : {
      filename   :  "time.db"
      overwrite  :  true
    }
  }
  MemoryTracker: {
    #ignoreTotal       : 1 # no. of events to exclude - '1' by default
    #printSummaries    : ["*"] # or any combination of ["general","event","module"]
    includeMallocInfo : true
    dbOutput     : {
      filename   :  "mem.db"
      overwrite  :  true
    }
  }

  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_gen_services
  @table::microboone_g4_services
  IFDH: {}

}

#source:
#{
#  module_type: EmptyEvent
#  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
#  maxEvents:   10          # Number of events to create
#  firstRun:    1           # Run number to use for this file
#  firstEvent:  1           # number of first event in the file
#}
source: {
  module_type: RootInput
  maxEvents:  -1            # number of events to read
} # source

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   rns:       { module_type: "RandomNumberSaver" }

   generator:  @local::microboone_genie_simple
   largeant:   @local::microboone_largeant
   drift:    {
                 module_type: SimDriftElectrons
                 SimulationLabel: "largeant:TPCActive"
             }
   ionization: {
                 module_type: "larsim/ElectronDrift/ShiftEdepSCE"
                 EDepTag:     "largeant:TPCActive"
                 MakeAnaTree: false
               }
    mcreco:    @local::standard_mcreco
 }

 filters:
 {
  finalstatefilterCCnopi: @local::microboone_finalstateselectfilter

  nuebackgroundfilterM03E15: {
    module_type: "NueBackgroundFilter"
    MCTruthLabel: "generator"
    MCShowerLabel: "mcreco"
    MaxMuonEGeV: 0.3
    MinElecMCShwEMeV: 15
  }
 }

 #define the producer and filter modules for this path, order matters,
 #filters reject all following items.  see lines starting physics.producers below
 #simulate: [ rns, generator, finalstatefilterCCnopi, largeant, ionization, mcreco, nuebackgroundfilterM03E15 ]
 simulate: [ rns, finalstatefilterCCnopi, largeant, ionization, mcreco, nuebackgroundfilterM03E15 ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [simulate]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "genie_gen.root" #default file name, can override from command line with -o or --output
   dataTier:    "generated"
   compressionLevel: 1
   SelectEvents: [simulate]
 }
}


physics.producers.generator.GlobalTimeOffset: 3125.
physics.producers.generator.RandomTimeOffset: 1600.
physics.producers.generator.TopVolume: "volTPCActive"
physics.producers.generator.BeamName: "booster"


services.LArG4Parameters.FillSimEnergyDeposits:       true
#services.LArG4Parameters.NoElectronPropagation:       true
services.LArG4Parameters.InitialSimEnergyDepositSize: 100000

physics.producers.largeant.KeepParticlesInVolumes: ["volCryostat"]

physics.producers.mcreco.MCParticleLabel: "largeant"
physics.producers.mcreco.SimChannelLabel: "ionization"
physics.producers.mcreco.UseSimEnergyDeposit: true
physics.producers.mcreco.MCRecoPart.SavePathPDGList: [13,-13,211,-211,111,311,310,130,321,-321,2212,2112,2224,2214,2114,1114,3122,1000010020,1000010030,1000020030,1000020040]

physics.filters.finalstatefilterCCnopi.IsVerbose: false
physics.filters.finalstatefilterCCnopi.isInclusive: true
physics.filters.finalstatefilterCCnopi.PDG: [13, 11, -11, 111, -211, 211]
physics.filters.finalstatefilterCCnopi.PDGCount: [1, 0, 0, 0, 0, 0]
physics.filters.finalstatefilterCCnopi.PDGCountExclusivity: [true, true, true, true, true, true]

services.SpaceCharge.EnableSimSpatialSCE:          true
services.SpaceCharge.EnableSimEfieldSCE:           true
services.DetectorClocksService.InheritClockConfig: false
