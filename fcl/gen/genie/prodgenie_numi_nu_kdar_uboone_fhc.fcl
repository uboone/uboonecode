#include "beamspilltimings.fcl"
#include "services_microboone.fcl"
#include "genie_microboone_default+MEC.fcl"

process_name: GenieGen

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "genie_hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_gen_services
  IFDH:         {}
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::microboone_genie_uniform_flux_cc
   rns:       { module_type: "RandomNumberSaver" }
 }

 filters:
 {
   kdar: { module_type: "NuMIKDARFilter" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator, kdar ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "genie_gen.root" #default file name, can override from command line with -o or --output
   dataTier:    "generated"
   compressionLevel: 1
   SelectEvents: [ simulate ]
 }
}


outputs.out1.fileName: "prodgenie_dk2nu_numi_nu_uboone_%tc_gen_fhc.root"

# dk2nu flux generation config
physics.producers.generator:                    @local::standard_genie
physics.producers.generator.POTPerSpill:        5e13
physics.producers.generator.EventsPerSpill:     0
physics.producers.generator.GlobalTimeOffset:   5627.5
physics.producers.generator.RandomTimeOffset:   9600.
physics.producers.generator.TopVolume:          "volCryostat"
physics.producers.generator.BeamName:           "numi"
physics.producers.generator.EventGeneratorList: "Default"
physics.producers.generator.FluxType:           "dk2nu"
physics.producers.generator.FluxSearchPaths:    "/pnfs/uboone/persistent/uboonebeam/numi_dk2nu_zero_threshold/FHC/" # path to the production files
physics.producers.generator.FluxFiles:          ["g4numiv6_*.root"]
physics.producers.generator.DetectorLocation:   "microboone-numi-v2"

# Add beam timing structure to the generation of events
physics.producers.generator.SpillTimeConfig: @local::FNAL_NuMI_default