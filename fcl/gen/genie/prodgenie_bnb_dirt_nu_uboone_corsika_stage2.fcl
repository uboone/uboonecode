#include "services_microboone.fcl"
#include "corsika_microboone.fcl"
#include "FilterGenInTime_module.fcl"
#include "largeantmodules_microboone.fcl"


process_name: DirtCorsikaStage2

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "genie_hist.root" }
  TimeTracker: {
    printSummary : true
    dbOutput     : {
      filename   :  "time.db"
      overwrite  :  true
    }
  }
  MemoryTracker: {
    #ignoreTotal       : 1 # no. of events to exclude - '1' by default
    #printSummaries    : ["*"] # or any combination of ["general","event","module"]
    includeMallocInfo : true
    dbOutput     : {
      filename   :  "mem.db"
      overwrite  :  true
    }
  }
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_gen_services
  @table::microboone_g4_services

}

#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents: 10
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   corsika: @local::microboone_corsika_cmc
   larg4corsika:   @local::microboone_largeant
   largeant: {
     module_type: "MergeSimSources"
     InputSourcesLabels: [ "largeant","larg4corsika"]
     TrackIDOffsets: [ 10000000,20000000 ]
   }

   rns:       { module_type: "RandomNumberSaver" }
 }



 #define the producer and filter modules for this path, order matters,
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, corsika, larg4corsika, largeant ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [simulate]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_corsika_g4.root" #default file name, can override from command line with -o or --output
   dataTier:    "generated"
   compressionLevel: 1
   SelectEvents: [simulate]
   outputCommands: [ "keep *_*_*_*",
                  "drop *_largeant_*_DirtCorsikaStage1",
                  "drop *_larg4corsika_*_*"]
    dropMetaDataForDroppedData: true
    saveMemoryObjectThreshold: 0


 }
}


physics.producers.corsika.SampleTime:       7.25e-3
physics.producers.corsika.TimeOffset:       -4.05e-3 #4.8 ms readout should start at -1.6 ms to match data
physics.producers.corsika.BufferBox:        [ -250.0,250.0,-250.0,250.0,-250.0,250.0 ]
physics.producers.corsika.ProjectToHeight:  1800  #height to which particles are projected in cm
physics.producers.corsika.ShowerInputFiles: [
    "/pnfs/uboone/persistent/users/mibass/corsika/zerosuppressed/p_showers_*.db",
    "/pnfs/uboone/persistent/users/mibass/corsika/zerosuppressed/He_showers_*.db",
    "/pnfs/uboone/persistent/users/mibass/corsika/zerosuppressed/N_showers_*.db",
    "/pnfs/uboone/persistent/users/mibass/corsika/zerosuppressed/Mg_showers_*.db",
    "/pnfs/uboone/persistent/users/mibass/corsika/zerosuppressed/Fe_showers_*.db" ]
physics.producers.corsika.ShowerFluxConstants:  [ 9.72e1, 1.45e2, 2.07e2, 4.02e2, 4.18e2]

physics.producers.larg4corsika.KeepParticlesInVolumes: ["volCryostat"]
