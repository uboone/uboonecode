#include "reco_uboone_data_mcc8.fcl"
#include "time_memory_tracker_microboone.fcl"
#include "UBCRTCosmicFilter.fcl"
#include "microboone_crt_merger.fcl"
#include "microboone_crt_file_manager.fcl"

process_name: DataOpticalFilter

services:
{
    scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.

    # Load the service that manages root files for histograms.
    TFileService:            { fileName: "optfilter_hist.root" }
    TimeTracker:             @local::microboone_time_tracker
    MemoryTracker:           @local::microboone_memory_tracker
    RandomNumberGenerator:   {} #ART native random number generator
    message:                 @local::microboone_message_services_prod_debug
    FileCatalogMetadata:     @local::art_file_catalog_data
    CRTFileManager:          @local::microboone_crt_file_manager
                             @table::microboone_reco_data_services
}
services.DatabaseUtil.ShouldConnect: false

source:
{
    module_type:               RootInput
    maxEvents:                 10        # Number of events to create
    saveMemoryObjectThreshold: 0
    inputCommands: ["keep *_*_*_*",
                    "drop recob::OpHit*_*_*_Swizzler",
		    "drop recob::OpFlash*_*_*_Swizzler" ]
}

physics:
{
   producers:
   {
       @table::microboone_reco_data_producers
       mergerextra : @local::microboone_crt_merger_extra
   }

   filters:
   { 
       @table::microboone_reco_data_filters
       crtfilteron: @local::UBCRTCosmicFilterBNBON
   }

   analyzers:
   {
       @table::microboone_reco_data_analyzers
   }

   #reco sequence and trigger_paths to be defined elsewhere
   filter:        [ rns, @sequence::microboone_reco_data_optical, opfiltercommonbnb, mergerextra, crtfilteron ]
   stream1:       [ out1 ]
   trigger_paths: [ filter ]
   end_paths:     [ stream1 ]  
}

physics.producers.mergerextra.debug: false
services.CRTFileManager.ubversion_CRTHits: prod_v06_26_01_26

physics.filters.crtfilteron.useAsFilter: false

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
    out1:
    {
        module_type:               RootOutput
	fileName:                  "%ifb_%tc_optfilter.root"
        dataTier:                  "reconstructed"
        compressionLevel:          1
        saveMemoryObjectThreshold: 0
	SelectEvents: [ filter ]
    }
}

### Here we try to suppress known and pointless messages
services.message.destinations :
{
    STDCOUT: 
    {
        type:      "cout"      #tells the message service to output this destination to cout
        threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
        categories:
        {
            ChannelFilter:
            {
                limit:       0
                reportEvery: 0
            }
            TrackStitcher:
            {
                limit:       0
                reportEvery: 0
            }
            CRHitRemoval:
            {
                limit:       0
                reportEvery: 0
            }
            default:
            {
                limit:       -1  #don't print anything at the infomsg level except the explicitly named categories
                reportEvery: 1
            }
        }
    }
}
