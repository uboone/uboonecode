#include "dlprod_fclbase_producers.fcl"
#include "dlprod_fclbase_analyzers.fcl"
#include "microboone_ubdl_module.fcl"
#include "time_memory_tracker_microboone.fcl"

process_name: DLDeploy

services:
{
  TFileService: { fileName: "larcv_hist.root" }  
  scheduler:    { defaultExceptions: false }
  #TimeTracker:             @local::microboone_time_tracker
  MemoryTracker:           @local::microboone_memory_tracker
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_data
  @table::microboone_services_reco
}

#services.TimeTracker.printSummary: false
#services.TimeTracker.dbOutput: {}
#services.MemoryTracker.printSummaries: []
#services.MemoryTracker.includeMallocInfo: false
services.DetectorPropertiesService.NumberTimeSamples: 6400
services.DetectorPropertiesService.ReadOutWindowSize: 6400
services.DetectorClocksService.InheritClockConfig:    false
services.DetectorClocksService.TriggerOffsetTPC:      -0.400e3
services.SpaceCharge.EnableSimSpatialSCE: true
services.SpaceCharge.EnableSimEfieldSCE:  true
services.LLMetaMaker: {Enable: false}
services.LArCVMetaMaker: {Enable: false}

source_gen:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1        # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

source_reprocess:
{
  module_type: RootInput
  maxEvents:   100000     # Number of events to create
}

physics:
{
 producers: {
   @table::dlprod_producers
   ubdl: @local::microboone_ubdl
 }

 filters: {}

 analyzers: {
   @table::dlprod_analyzers
 }

 dlnetpath: [ubdl]
 stream: [ reco2d,mcinfo, opreco,gaushitMCinfoBacktracker,superaMCTruthOnly, out1]
 end_paths: [stream]
 trigger_paths: [ dlnetpath ]
}

# configure larlite
# -- trigger --
# DATA
#physics.analyzers.opreco.DataLookUpMap.trigger: ["daq"]
# MC
physics.analyzers.opreco.DataLookUpMap.trigger: ["triggersim"]
# -- CRT --
physics.analyzers.opreco.DataLookUpMap.crthit:   ["crthitcorr"]
physics.analyzers.opreco.DataLookUpMap.crttrack: ["crttrack"]
physics.analyzers.opreco.DataLookUpMap.daqheadertimeuboone: ["daq"]
physics.analyzers.opreco.DAQHeaderProducer: "daq"
physics.analyzers.opreco.DAQHeaderTimeUBProducer: "daq"

physics.analyzers.opreco.DataLookUpMap.ophit: ["ophitBeam","ophitCosmic","ophitBeamCalib","ophitCosmicCalib"]
physics.analyzers.opreco.DataLookUpMap.opflash: ["simpleFlashBeam","simpleFlashCosmic","opflashBeam","opflashCosmic","simpleFlashBeam::OverlayStage1a","simpleFlashCosmic::OverlayStage1a","wcopflash:beam", "wcopflash:cosmic"]
physics.analyzers.opreco.AssociationLookUpMap.ophit: ["ophitBeam","ophitCosmic","ophitBeamCalib","ophitCosmicCalib"]
physics.analyzers.opreco.AssociationLookUpMap.opflash: ["simpleFlashBeam","simpleFlashCosmic","opflashBeam","opflashCosmic","simpleFlashBeam::OverlayStage1a","simpleFlashCosmic::OverlayStage1a"]

# Turn on Mask-RCNN
#physics.producers.ubdl.CosmicMRCNNMode: "PyTorchCPU"

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_ubdl1.root" #default file name, can override from command line with -o or --output
   dataTier:    "larcv"
   compressionLevel: 1
 }
}

