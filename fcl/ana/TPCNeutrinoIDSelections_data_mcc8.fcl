#include "reco_uboone_data_mcc8.fcl"
#include "tpcneutrinoidfilter_microboone.fcl"
#include "litemaker_base.fcl"

process_name: TPCNeutrinoIDFilterSelectionsMCC8

services:
{
  #Load the service that manages root files for histograms.
  TFileService:          { fileName: "tpcneutrinoid.root" }
  RandomNumberGenerator: {}                     #ART native random number generator
  FileCatalogMetadata:   @local::art_file_catalog_data
  message:               @local::standard_info

  @table::microboone_reco_data_services
  LLMetaMaker: {Enable: false}
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1           
}

physics:
{
 producers:{
   NuMuCCSelectionII:             @local::microboone_tpcNeutrinoID
   ChargedTrackMultiplicity:      @local::microboone_tpcNeutrinoID
 }

 filters:{
   CTMFilter : @local::microboone_tpcneutrinoidfilter
   NuMuCCSelIIFilter: @local::microboone_tpcneutrinoidfilter
 }

 analyzers:{
   litescannersel2: @local::litemaker_base
 }

 chargetrack: [ ChargedTrackMultiplicity, CTMFilter ]
 numusel2:    [ NuMuCCSelectionII, NuMuCCSelIIFilter ]
 
 stream1:       [ outsel1, outsel2, litescannersel2 ]

 trigger_paths: [ chargetrack, numusel2 ]

 end_paths:     [ stream1 ]    


}

outputs:
{
 outsel1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_outsel1.root"
   dataTier:    "reconstructed"
   SelectEvents: [ chargetrack ]
   streamName: "outsel1"
   compressionLevel: 1
   outputCommands: [ "drop *_*_*_*",
                     "keep *_ChargedTrackMultiplicity_*_*" ]
 } 
 outsel2:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_outsel2.root"
   dataTier:    "reconstructed"
   SelectEvents: [ numusel2 ]
   streamName: "outsel2"
   compressionLevel: 1
 } 
}

physics.producers.ChargedTrackMultiplicity.NeutrinoIDAlgName:                         "ChargedTrackMultiplicityAlg"
physics.filters.CTMFilter.VertexModuleLabelVec:                    ["ChargedTrackMultiplicity"]
physics.filters.CTMFilter.VtxTrackAssnModuleLabelVec:              ["ChargedTrackMultiplicity"]
physics.filters.CTMFilter.Cluster2DCosmicProducerLabel:            ""
physics.filters.CTMFilter.Cluster2DCosmicClusterAssns:             ""


physics.producers.NuMuCCSelectionII.NeutrinoIDAlgName:                         "NuMuCCSelectionIIAlg"
physics.filters.NuMuCCSelIIFilter.VertexModuleLabelVec:                    ["pandoraNu"]
physics.filters.NuMuCCSelIIFilter.VtxTrackAssnModuleLabelVec:              ["NuMuCCSelectionII"]
physics.filters.NuMuCCSelIIFilter.Cluster2DCosmicProducerLabel:            ""
physics.filters.NuMuCCSelIIFilter.Cluster2DCosmicClusterAssns:             ""

# Larlite stuff

physics.analyzers.litescannersel2.SelectEvents: [ numusel2 ]
physics.analyzers.litescannersel2.unique_filename: false
physics.analyzers.litescannersel2.out_filename: "larlite_sel2.root"
physics.analyzers.litescannersel2.DataLookUpMap:{
  trigger:    ["daq"]
  swtrigger:  ["swtrigger"]
  opdigit:    ["saturation"]
  ophit:      ["ophitBeam","ophitCosmic"]
  opflash:    ["simpleFlashBeam","simpleFlashCosmic","opflashBeam","opflashCosmic"]
  hit:        ["gaushit","pandoraCosmicHitRemoval"]
  cluster:    ["pandoraNu","pandoraCosmic"]
  sps:        ["pandoraCosmic","pandoraNu"]
  pcaxis:     ["pandoraCosmic","pandoraNu"]
  vertex:     ["pandoraCosmic","pandoraNu"]
  track:      ["pandoraCosmic","pandoraNu"]
  seed:       ["pandoraCosmic","pandoraNu"]
  shower:     ["pandoraCosmic","showerrecopandora","pandoraNu"]
  pfpart:     ["pandoraCosmic","pandoraNu"]
  cosmictag:  ["pandoraCosmicContTag","pandoraCosmictag","pandoraNuContTag","pandoraNutag"]
  partid:     ["pandoraCosmicpid","pandoraNupid"]
}
physics.analyzers.litescannersel2.AssociationLookUpMap:{
  ophit:   ["ophitBeam","ophitCosmic"]
  opflash: ["simpleFlashBeam","simpleFlashCosmic","opflashBeam","opflashCosmic"]
  hit:        ["gaushit","pandoraCosmicHitRemoval"]
  cluster:    ["pandoraNu","pandoraCosmic"]
  sps:        ["pandoraCosmic","pandoraNu"]
  vertex:     ["pandoraNu","pandoraCosmic"]
  track:      ["pandoraCosmic","pandoraNu"]
  seed:       ["pandoraCosmic","pandoraNu"]
  shower:     ["pandoraCosmic","showerrecopandora","pandoraNu"]
  pfpart:     ["pandoraCosmic","pandoraNu"]
  cosmictag:  ["pandoraCosmicContTag","pandoraCosmictag","pandoraNuContTag","pandoraNutag"]
  partid:     ["pandoraCosmicpid","pandoraNupid"]
}
physics.analyzers.litescannersel2.AssLabelToSave: ["simpleFlashBeam",
						   "simpleFlashCosmic",
						   "opflashBeam",
						   "opflashCosmic"]
microboone_tfile_metadata:
{
  JSONFileName:          "larlite_sel2.root.json"
  GenerateTFileMetadata: true
  dataTier:              "larlite"
  fileFormat:            "root"
}
